{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/state.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/index.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/createGame.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/node_modules/lit-html/lit-html.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/node_modules/lit-html/lib/lit-extended.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/page.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/render.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/img/party_hard_by_wolferahm-d6c8oge.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","installedModules","9","__webpack_require__","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","head","document","getElementsByTagName","script","createElement","charset","timeout","nc","setAttribute","src","p","0","1","2","3","4","5","6","7","8","setTimeout","onScriptComplete","type","target","event","onerror","onload","clearTimeout","chunk","errorType","realSrc","error","Error","request","appendChild","all","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","oe","err","console","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","s","+jIT","t","state","page","mode","input","gamesRef","then","assign","_","firebase","database","ref","49On","_render__WEBPACK_IMPORTED_MODULE_0__","rerender","_state__WEBPACK_IMPORTED_MODULE_1__","navigator","addEventListener","serviceWorker","register","registration","log","catch","registrationError","LfEo","a","createGameTemplate","lit_html_lib_lit_extended_js__WEBPACK_IMPORTED_MODULE_0__","_img_party_hard_by_wolferahm_d6c8oge_png__WEBPACK_IMPORTED_MODULE_2___default","anonLogin","createNewGame","user","_render__WEBPACK_IMPORTED_MODULE_1__","changePage","templateCaches","Map","TemplateResult","[object Object]","strings","values","partCallback","defaultPartCallback","this","html","isTextBinding","closing","findTagClose","nodeMarker","marker","template","innerHTML","getHTML","render","result","container","templateFactory","templateCache","set","Template","getTemplateElement","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","firstChild","String","Math","random","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","indexOf","TemplatePart","index","rawName","element","parts","content","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","stringForPart","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","removeChild","getValue","part","isDirective","directiveValue","__litDirective","isPrimitiveValue","AttributePart","size","_previousValues","startIndex","text","v","Array","isArray","Symbol","iterator","_equalToPreviousValues","join","_interpolate","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","_setPromise","clear","_insert","_getTemplate","itemParts","item","itemPart","itemStart","setValue","lastPart","templatePart","getTemplate","_parts","valueIndex","importNode","__webpack_exports__","lit_extended_html","lit_extended_extendedPartCallback","startsWith","eventName","listener","previous","_listener","removeEventListener","endsWith","page_pageTemplate","lit_extended","render_changePage","party_hard_by_wolferahm_d6c8oge_default","page_renderPage","createGame","imprintTemplate","questionGuessPwTemplate","questionGuessAmountTemplate","createMPGameTemplate","setNameTemplate","enterGroupTemplate","leaderboardTemplate","answerTemplate","loadingTemplate","winTemplate","waitingTemplate","game","render_rerender","b","lib_state","body","newPage","gtag","GA_TRACKING_ID","page_path","location","hash","openGame","substr","xzSw"],"mappings":"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","file":"app.bundle.162bb5253bd110d1a936.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t};\n\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t9: 0\n \t};\n\n\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\t\tvar script = document.createElement('script');\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = __webpack_require__.p + \"\" + ({\"0\":\"vendors~firebasedatabase~firebaseinit~gamelogic\",\"1\":\"vendors~firebasedatabase~gamelogic\",\"2\":\"vendors~gamelogic\",\"3\":\"imprint\",\"4\":\"gamelogic\",\"5\":\"firebaseinit\",\"6\":\"vendors~firebaseui\",\"7\":\"top10k\",\"8\":\"crypto-js\"}[chunkId]||chunkId) + \".bundle.\" + \"162bb5253bd110d1a936\" + \".js\";\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tfunction onScriptComplete(event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\tvar error = new Error('Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')');\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\thead.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"49On\");\n","export const state = {\r\n  page: 'index',\r\n  mode: 0,\r\n  input: '',\r\n  gamesRef: () => Promise.all([\r\n    import(/* webpackChunkName: \"firebasedatabase\" */ 'firebase/database'),\r\n    import(/* webpackChunkName: \"firebaseinit\" */ './firebaseinit')]).then(([_, firebase]) => firebase.database().ref('games')),\r\n}\r\n","import { rerender } from './render';\r\nimport { state } from './state';\r\n\r\nrerender()\r\n\r\nwindow.state = state;\r\nwindow.rerender = rerender;\r\n\r\nif ('serviceWorker' in navigator) {\r\n  window.addEventListener('load', () => {\r\n    navigator.serviceWorker.register('/sw.js').then(registration => {\r\n      console.log('SW registered: ', registration);\r\n    }).catch(registrationError => {\r\n      console.log('SW registration failed: ', registrationError);\r\n    });\r\n  });\r\n}\r\n\r\nconsole.log(`%cBuild: 2018-03-25 17:03:16 UTC`, `font-weight: bold`)","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { rerender, changePage } from \"../render\";\r\nimport titleImg from '../img/party_hard_by_wolferahm-d6c8oge.png';\r\n\r\nexport const createGameTemplate = state => html`\r\n<img height=\"200\" width=\"200\" src=\"${titleImg}\"  alt=\"A unicorn vomiting a rainbow\" />\r\n<h1>Ready to pwn?</h1>\r\n<div class=\"button\" on-click=${e => {\r\n  import(/* webpackChunkName: \"gamelogic\" */ '../gameLogic').then(({ anonLogin, createNewGame}) => {\r\n    if (!state.user) {\r\n      anonLogin().then(user => {\r\n        createNewGame(user);\r\n\r\n        changePage('name');\r\n      });\r\n    } else {\r\n      createNewGame(state.user);\r\n        \r\n      changePage('name');\r\n    }\r\n  })\r\n  }}>Singleplayer</div>\r\n<div class=\"button\" on-click=${_ => changePage('create_mp')}>Multiplayer</div>\r\n  <div class=\"button\" id=\"mode-button\" on-click=${e => {\r\n    if (state.mode === 0) {\r\n      state.mode = 1;\r\n    } else {\r\n      state.mode = 0;\r\n    }\r\n\r\n    rerender();\r\n  }}\r\n  >Mode: ${state.mode === 0 ? 'Number => Password' : 'Password => Number'}</div>\r\n`\r\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-posisitions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // We keep this current node, but reset its content to the last\n                // literal part. We insert new literal nodes before this so that the\n                // tree walker keeps its position correctly.\n                node.textContent = strings[lastIndex];\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore(document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return directiveValue;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const directiveValue = {};\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== directiveValue &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === directiveValue) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                while (index < part.index) {\n                    index++;\n                    walker.nextNode();\n                }\n                this._parts.push(this._partCallback(this, part, walker.currentNode));\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, directiveValue, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.startsWith('on-')) {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        if (templatePart.name.endsWith('$')) {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (templatePart.name.endsWith('?')) {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === directiveValue) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        const previous = this._listener;\n        if (listener === previous) {\n            return;\n        }\n        this._listener = listener;\n        if (previous != null) {\n            this.element.removeEventListener(this.eventName, previous);\n        }\n        if (listener != null) {\n            this.element.addEventListener(this.eventName, listener);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","import { html } from 'lit-html/lib/lit-extended.js'\r\n\r\nimport { createGameTemplate } from \"./createGame\";\r\nimport { rerender, changePage } from '../render';\r\n\r\nimport titleImg from '../img/party_hard_by_wolferahm-d6c8oge.png';\r\n\r\nexport const pageTemplate = (state) => html`\r\n<header>\r\n    <div>\r\n      <a href=\"javascript:void(0);\" on-click=${_ => changePage('index')}>\r\n        <img height=\"40\" width=\"40\" src=\"${titleImg}\" title=\"MyLittlePwnage\" alt=\"A unicorn vomiting a rainbow\"  />\r\n      </a>\r\n    </div>\r\n    <div id=\"title\" on-click=${_ => changePage('index')}>MyLittlePwnage</div>\r\n</header>\r\n<main>\r\n    <section>\r\n        ${renderPage(state)}\r\n    </section>\r\n</main>\r\n<footer>\r\n    <a href=\"https://lergin.de/imprint\">Imprint</a>\r\n    <a href=\"https://lergin.de/privacy\">Privacy</a>\r\n    <a href=\"javascript:void(0);\" on-click=${_ => changePage(\"imprint\")}>Credits</a>\r\n</footer>`;\r\n\r\n\r\n\r\nconst renderPage = state => {\r\n  if(state.page == \"index\"){\r\n    return createGameTemplate(state)\r\n  }\r\n  \r\n  switch (state.page){\r\n    case 'index': return createGameTemplate(state);\r\n    case 'imprint': return import(/* webpackChunkName: \"imprint\" */ './imprint').then(({ imprintTemplate }) => imprintTemplate(state));\r\n  }\r\n\r\n  return import(/* webpackChunkName: \"gamelogic\" */ '../gameLogic').then(({ \r\n    questionGuessPwTemplate, questionGuessAmountTemplate, createMPGameTemplate, setNameTemplate, enterGroupTemplate, leaderboardTemplate, answerTemplate,\r\n    loadingTemplate, winTemplate, waitingTemplate\r\n  }) => {\r\n    switch (state.page) {\r\n      case 'question':\r\n        switch (state.game.mode) {\r\n          case 0: return questionGuessPwTemplate(state);\r\n          case 1: return questionGuessAmountTemplate(state);\r\n        }\r\n\r\n        break;\r\n      case 'create_mp': return createMPGameTemplate(state);\r\n      case 'name': return setNameTemplate(state);\r\n      case 'enter_group': return enterGroupTemplate(state);\r\n      case 'waiting': return waitingTemplate(state);\r\n      case 'leaderboard': return leaderboardTemplate(state);\r\n      case 'win': return winTemplate(state);\r\n      case 'answer': return answerTemplate(state);\r\n      case 'loading': return loadingTemplate(state);\r\n    }\r\n  });\r\n}","import { render } from 'lit-html/lib/lit-extended.js';\r\nimport { state } from './state';\r\nimport { pageTemplate } from './templates/page';\r\n\r\nexport function rerender() {\r\n  render(pageTemplate(state), document.body)\r\n}\r\n\r\n/**\r\n * changes the page and rerenders the site\r\n */\r\nexport function changePage(newPage){\r\n  state.page = newPage;\r\n\r\n  gtag('config', window.GA_TRACKING_ID, { 'page_path': `/${newPage}` });\r\n\r\n  rerender();\r\n}\r\n\r\nif (window.location.hash.startsWith(\"#!\")){\r\n  import(/* webpackChunkName: \"gamelogic\" */ './gameLogic').then(({ anonLogin, openGame }) => {\r\n    if(!state.user){\r\n      anonLogin().then(user => {\r\n        openGame(window.location.hash.substr(2));\r\n  \r\n        changePage('name');\r\n      });\r\n    }else{\r\n      openGame(window.location.hash.substr(2));\r\n\r\n      changePage('name');\r\n    }\r\n  })\r\n}\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  if (window.location.hash.startsWith(\"#!\")) {\r\n    import(/* webpackChunkName: \"gamelogic\" */ './gameLogic').then(({ anonLogin, openGame }) => {\r\n      if (!state.user) {\r\n        anonLogin().then(user => {\r\n          openGame(window.location.hash.substr(2));\r\n\r\n          changePage('name');\r\n        });\r\n      } else {\r\n        openGame(window.location.hash.substr(2));\r\n\r\n        changePage('name');\r\n      }\r\n    })\r\n  }\r\n})\r\n","module.exports = __webpack_public_path__ + \"3414894f6df05c17c9e848256138e374.png\";"],"sourceRoot":""}