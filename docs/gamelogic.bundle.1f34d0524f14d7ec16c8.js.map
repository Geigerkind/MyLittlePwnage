{"version":3,"sources":["webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/User.ts","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/Guess.ts","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/Game.ts","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/logic.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/Question.ts","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/firebaseinit.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/loading.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/answer.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/login.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/createMpGame.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/enterGroup.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/leaderboard.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/trivia.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/questionGuessAmount.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/questionGuessPw.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/setName.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/win.js","webpack:///C:/Users/Malte/Google Drive/workspace/web/MyLittlePwnage/lib/templates/waiting.js"],"names":["exports","User","[object Object]","uid","this","points","render_1","__webpack_require__","logic_1","state_1","Guess","ref","question","ready","child","on","snap","amount","val","user","addPoints","getPoints","rerender","guess","state","game","creator","check","count","mode","getPasswordCount","length","isNaN","parseInt","set","amountA","amountB","a","percentage","Math","log","E","round","aJ1d","e","t","n","s","__awaiter","Promise","i","r","u","next","o","throw","done","value","then","apply","Object","defineProperty","Question_1","User_1","Game","hackLastQuestion","maxRounds","questions","Set","players","finished","started","createListeners","addPlayer","push","Question","currentQuestion","has","load","player","displayName","page","newQuestion","add","newPlayer","key","changePage","gamesRef","firebase_app__WEBPACK_IMPORTED_MODULE_1__","database","createNewGame","_Game__WEBPACK_IMPORTED_MODULE_4__","create","createNewQuestion","addPlayerToGame","gameRef","answerQuestion","questionRef","answer","playerReady","password","module","__esModule","assign","default","sha1","hash","toString","toUpperCase","suffix","substr","url","fetch","res","text","split","find","h","async","retrievePseudoRandomNumber","index","floor","random","pw","top10k","data","joinGame","openGame","Guess_1","_mode","guesses","Map","_answer","_question","type","firebase_app__WEBPACK_IMPORTED_MODULE_0__","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","__webpack_exports__","qnbl","loading_loadingTemplate","lit_extended","answer_answerTemplate","get","yourAnswerTemplate","playerIsReady","render","login_auth","app","auth","login_login","firebaseui","ui","AuthUI","uiConfig","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","start","login_anonLogin","signInAnonymously","login_logout","signOut","onAuthStateChanged","lib_state","originalUser","console","createMpGame_createMPGameTemplate","logic","_","enterGroup_enterGroupTemplate","groupkey","document","getElementById","updateProfile","leaderboard_leaderboardTemplate","rdy","forEach","topTemplate","sort","b","map","pl","leaderboard_lederboardItemTemplate","isCreator","trivia_trivia","trivia_getRandomTrivia","questionGuessAmount_questionGuessAmountTemplate","questionGuessPw_questionGuessPwTemplate","setName_setNameTemplate","navigator","share","title","catch","error","name","win_winningGifs","win_winTemplate","size","waiting_waitingTemplate"],"mappings":"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","file":"gamelogic.bundle.1f34d0524f14d7ec16c8.js","sourcesContent":["export class User {\r\n  public uid;\r\n  public displayName;\r\n  public points = 0;\r\n  \r\n  public originalUser;\r\n\r\n  constructor(uid) {\r\n    this.uid = uid;\r\n  }\r\n\r\n  addPoints(points) {\r\n    this.points += points;\r\n  }\r\n}\r\n","import { User } from \"./User\";\r\nimport { Question } from \"./Question\";\r\nimport { rerender } from \"./render\";\r\nimport { getPasswordCount } from \"./logic\";\r\nimport { Reference } from \"@firebase/database\";\r\nimport { state } from \"./state\";\r\n\r\nexport class Guess {\r\n  private ref: Reference;\r\n  public amount;\r\n  public guess;\r\n  public ready: boolean = false;\r\n  public user: User;\r\n  private question: Question;\r\n\r\n  constructor(ref: Reference, question: Question){\r\n    this.ref = ref;\r\n    this.question = question;\r\n  }\r\n\r\n  createListeners() {\r\n    this.ref.child('amount').on('value', snap => {\r\n      this.amount = snap.val();\r\n\r\n      if (this.user) {\r\n        this.user.addPoints(this.getPoints());\r\n      }\r\n\r\n      rerender();\r\n    });\r\n\r\n    this.ref.child('guess').on('value', snap => {\r\n      this.guess = snap.val();\r\n\r\n      if (state.user && state.user.uid === this.question.game.creator.uid) {\r\n        this.check()\r\n      }\r\n\r\n      rerender();\r\n    });\r\n\r\n    this.ref.child('ready').on('value', snap => {\r\n      this.ready = snap.val();\r\n      rerender();\r\n    });\r\n  }\r\n\r\n  public async check() {\r\n    let count = 0;\r\n    if (this.question.mode === 0) {\r\n      count = await getPasswordCount(this.guess);\r\n    } else if (this.guess !== null && this.guess.length > 0 && !isNaN(this.guess)) {\r\n      count = parseInt(this.guess);\r\n    }\r\n\r\n    this.ref.child('amount').set(count);\r\n  }\r\n\r\n  getPoints(){\r\n    let amountA = this.amount;\r\n    let amountB = this.question.question;\r\n\r\n    if (amountA < amountB) {\r\n      const a = amountA;\r\n      amountA = amountB;\r\n      amountB = a;\r\n    }\r\n\r\n    if (amountA == 0) {\r\n      return 0;\r\n    }\r\n\r\n    const percentage = Math.log(1 + (amountB / amountA) * (Math.E - 1));\r\n\r\n    if (percentage < 1) {\r\n      return Math.round(100 * percentage)\r\n    }\r\n\r\n    return 100;\r\n  }\r\n}","import { Question } from \"./Question\";\r\nimport { Reference } from \"@firebase/database\";\r\nimport { rerender, changePage } from \"./render\";\r\nimport { state } from \"./state\";\r\nimport { User } from \"./User\";\r\n\r\nexport class Game {\r\n  private ref: Reference;\r\n  public round: number = 0;\r\n  public hackLastQuestion: number = 0;\r\n  public maxRounds: number = 10;\r\n  public currentQuestion: Question;\r\n  public mode: number = 0;\r\n  public questions: Set<Question> = new Set();\r\n  public players: Set<User> = new Set();\r\n  public finished: boolean = false;\r\n  public started: boolean = false;\r\n  public creator: User;\r\n  \r\n  constructor(ref) {\r\n    this.ref = ref;\r\n\r\n    this.createListeners();\r\n  }\r\n\r\n  public create(user: User) {\r\n    this.ref.child('creator').set(user.uid);\r\n\r\n    this.addPlayer(user);\r\n\r\n    return this;\r\n  }\r\n\r\n  async newQuestion() {\r\n    const ref = this.ref.child('questions').push();\r\n    const question = new Question(ref, this);\r\n\r\n    question.mode = this.mode;\r\n\r\n    if (this.currentQuestion !== undefined && this.questions.has(this.currentQuestion)) {\r\n      this.currentQuestion.done = true;\r\n\r\n      rerender();\r\n    }\r\n\r\n    return question.load();\r\n  }\r\n\r\n  addPlayer(player: User) {\r\n    return this.ref.child('players').child(player.uid).set(player.displayName);\r\n  }\r\n\r\n  createListeners() {\r\n    this.ref.child('questions').on('child_added', snap => {\r\n      if (state.page === 'leaderboard') {\r\n        ++this.round;\r\n        state.page = 'question';\r\n      }\r\n\r\n      const newQuestion = new Question(snap.ref, this);\r\n\r\n      newQuestion.createListeners()\r\n\r\n      this.questions.add(newQuestion);\r\n\r\n      newQuestion.done = true;\r\n\r\n      rerender();\r\n    });\r\n\r\n    this.ref.child('players').on('child_added', snap => {\r\n      const newPlayer = new User(snap.key);\r\n      newPlayer.displayName = snap.val();\r\n\r\n      this.players.add(newPlayer);\r\n\r\n      if(state.page === 'name' && state.user.uid === newPlayer.uid){\r\n        changePage('question');\r\n      }\r\n    });\r\n\r\n    this.ref.child('finished').on('value', snap => {\r\n      this.finished = snap.val();\r\n    });\r\n\r\n    this.ref.child('creator').on('value', snap => {\r\n      this.creator = new User(snap.val());\r\n    });\r\n  }\r\n}\r\n","import './firebaseinit'\r\nimport * as firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport { rerender } from './render';\r\nimport { Game } from './Game';\r\n\r\nconst gamesRef = firebase.database().ref('games');\r\n\r\n/**\r\n * creates a new game\r\n */\r\nexport function createNewGame(user) {\r\n  state.game = new Game(gamesRef.push());\r\n\r\n  state.game.mode = state.mode;\r\n  state.game.create(user);\r\n\r\n  state.game.newQuestion();\r\n}\r\n\r\nexport function createNewQuestion() {\r\n  state.game.newQuestion();\r\n}\r\n\r\nexport function addPlayerToGame(gameRef, player) {\r\n  gameRef.child('players').child(player.uid).set(player.displayName);\r\n}\r\n\r\nexport function answerQuestion(questionRef, user, answer) {\r\n  questionRef.child('guesses').child(user.uid).child('guess').set(answer);\r\n}\r\n\r\nexport function playerReady(questionRef, user) {\r\n  questionRef.child('guesses').child(user.uid).child('ready').set(42);\r\n}\r\n\r\n/**\r\n * gets the amount the password was in the breaches\r\n */\r\nexport function getPasswordCount(password) {\r\n  const path = \"https://api.pwnedpasswords.com/range/\"\r\n\r\n  return import(/* webpackChunkName: \"crypto-js\" */ 'crypto-js/sha1').then(sha1 => {\r\n    const hash = sha1.default(password).toString().toUpperCase();\r\n    const prefix = hash.substr(0, 5);\r\n    const suffix = hash.substr(5);\r\n\r\n    const url = path + hash.substr(0, 5);\r\n\r\n    return fetch(url)\r\n      .then(res => res.text())\r\n      .then(res => res.split(/\\n/g))\r\n      .then(res => res.find(h => h.substr(0, 35) === suffix))\r\n      .then(res => res ? parseInt(res.substr(36)) : 0)\r\n  });\r\n}\r\n\r\nexport async function retrievePseudoRandomNumber() {\r\n  let index = Math.floor(Math.random() * 9999);\r\n  return import(/* webpackChunkName: \"top10k\" */\"./top10k.json\").then(async top10k => {\r\n    let pw = top10k.data[index];\r\n    return [pw, await getPasswordCount(pw)];\r\n  });\r\n}\r\n\r\nexport function joinGame(key, user){\r\n  state.game = new Game(gamesRef.child(key));\r\n\r\n  user.points = 0;\r\n  state.game.addPlayer(user);\r\n}\r\n\r\nexport function openGame(key){\r\n  state.game = new Game(gamesRef.child(key));\r\n}","import { Reference } from \"@firebase/database/dist/esm/src/api/Reference\";\r\nimport { retrievePseudoRandomNumber, getPasswordCount } from \"./logic\";\r\nimport { User } from \"./User\";\r\nimport { Game } from \"./Game\";\r\nimport { rerender } from \"./render\";\r\nimport { Guess } from \"./Guess\";\r\n\r\nexport class Question {\r\n  private _mode: number = 0;\r\n  private ref: Reference;\r\n  public done: boolean = false;\r\n  public finished: boolean = false;\r\n  private _answer;\r\n  private _question;\r\n  private guesses: Map<string, Guess> = new Map();\r\n  public game: Game;\r\n\r\n  constructor(ref, game: Game) {\r\n    this.ref = ref;\r\n    this.game = game;\r\n  }\r\n\r\n  public async load() {\r\n    const [answer, question] = await retrievePseudoRandomNumber();\r\n    this.answer = answer;\r\n    this.question = question;\r\n  }\r\n\r\n  set mode(mode) {\r\n    if (mode === 0) {\r\n      this.ref.child('type').set(\"pw\");\r\n    } else {\r\n      this.ref.child('type').set(\"amount\");\r\n    }\r\n  }\r\n\r\n  get mode() {\r\n    return this._mode;\r\n  }\r\n\r\n  set answer(answer) {\r\n    this.ref.child('answer').set(answer);\r\n  }\r\n\r\n  get answer() {\r\n    return this._answer;\r\n  }\r\n\r\n  set question(question) {\r\n    this.ref.child('question').set(question);\r\n  }\r\n\r\n  get question() {\r\n    return this._question;\r\n  }\r\n\r\n  public answerQuestion(user: User, answer) {\r\n    return this.ref.child('guesses').child(user.uid).child('guess').set(answer);\r\n  }\r\n\r\n  public playerIsReady(user: User) {\r\n    return this.ref.child('guesses').child(user.uid).child('ready').set(42);\r\n  }\r\n\r\n  createListeners() {\r\n    this.game.currentQuestion = this;\r\n\r\n    this.ref.child('guesses').on('child_added', snap => {\r\n      const guess = new Guess(snap.ref, this);\r\n      guess.user = [... this.game.players].find(a => a.uid === snap.key);\r\n      \r\n      this.guesses.set(guess.user.uid, guess);\r\n\r\n      guess.createListeners();\r\n    });\r\n\r\n    this.ref.child('question').on('value', snap => {\r\n      this._question = snap.val();\r\n      this.done = false;\r\n      rerender()\r\n    });\r\n\r\n    this.ref.child('answer').on('value', snap => {\r\n      this._answer = snap.val();\r\n    });\r\n\r\n    this.ref.child('type').on('value', snap => {\r\n      const type = snap.val();\r\n\r\n      if (type === \"pw\") {\r\n        this._mode = 0;\r\n      } else {\r\n        this._mode = 1;\r\n      }\r\n\r\n      rerender()\r\n    });\r\n\r\n    this.ref.child('finished').on('value', snap => {\r\n      this.finished = snap.val();\r\n    });\r\n  }\r\n}\r\n","import * as firebase from 'firebase/app'\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyB7ogQukblOMFJgxTBZ4u2uPX7NBfIBtP4\",\r\n  authDomain: \"hive-site-test.firebaseapp.com\",\r\n  databaseURL: \"https://hive-site-test.firebaseio.com\",\r\n  projectId: \"hive-site-test\",\r\n  storageBucket: \"hive-site-test.appspot.com\",\r\n  messagingSenderId: \"1072509145370\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import { html } from 'lit-html/lib/lit-extended.js'\r\n\r\nexport const loadingTemplate = state => html`\r\n<img width=\"200\" height=\"200\" src=\"https://m.popkey.co/fe4ba7/DYALX.gif\"  alt=\"loading\" />\r\n<h1>Loading...</h1>\r\n`\r\n","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { loadingTemplate } from \"./loading\";\r\nimport { playerReady, getPoints } from \"../logic\";\r\nimport { changePage } from \"../render\";\r\n\r\nexport const answerTemplate = state => {\r\n  const question = state.game.currentQuestion;\r\n\r\n  if(!question.guesses.has(state.user.uid)){\r\n    return loadingTemplate(state);\r\n  }\r\n\r\n  const guess = question.guesses.get(state.user.uid);\r\n\r\n  if (guess.amount === undefined) {\r\n    return loadingTemplate(state);\r\n  }\r\n\r\n  const yourAnswerTemplate = question.mode === 1 ? html`Your answer is ${guess.guess}` : html`${guess.guess} was leaked ${guess.amount} times`;\r\n\r\n  return html`\r\n  <section>\r\n  ${question.mode === 0 ? html`<h1>The answer is: ${question.answer}</h1>` : ''}\r\n  <h1>${question.answer} was leaked ${question.question} times</h1>\r\n  <h1>${yourAnswerTemplate}</h1>\r\n  <h1>You gained ${guess.getPoints()} points</h1>\r\n  <div class=\"button\" on-click=${e => {\r\n      state.game.currentQuestion.done = true;\r\n      state.game.currentQuestion.playerIsReady(state.user);\r\n\r\n      changePage('leaderboard')\r\n    }}>View rankings</div>\r\n  </section>\r\n  `\r\n}\r\n","import './firebaseinit'\r\nimport * as firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport { rerender } from './render';\r\nimport { state } from './state';\r\nimport { User } from './User';\r\n\r\nconst auth = firebase.auth();\r\n\r\n/**\r\n * shows the login panel\r\n */\r\nexport function login() {\r\n  import(/* webpackChunkName: \"firebaseui\" */ 'firebaseui').then(firebaseui => {\r\n    const ui = new firebaseui.auth.AuthUI(auth);\r\n\r\n    const uiConfig = {\r\n      signInFlow: 'popup',\r\n      signInSuccessUrl: 'localhost:5000',\r\n      signInOptions: [\r\n        auth.GoogleAuthProvider.PROVIDER_ID\r\n      ]\r\n    };\r\n\r\n    ui.start('#firebaseui-auth-container', uiConfig);\r\n  })\r\n  \r\n}\r\n\r\n/**\r\n * anonymous login\r\n */\r\nexport function anonLogin() {\r\n  return auth.signInAnonymously();\r\n}\r\n\r\nexport function logout() {\r\n  auth.signOut();\r\n}\r\n\r\nauth.onAuthStateChanged(user => {\r\n  if (user) {\r\n    state.user = new User(user.uid);\r\n\r\n    state.user.displayName = user.displayName;\r\n    state.user.originalUser = user;\r\n  } else {\r\n    console.log('logout')\r\n  }\r\n\r\n  rerender()\r\n});","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { createNewGame } from \"../logic\";\r\nimport { anonLogin } from \"../login\";\r\nimport { changePage } from \"../render\";\r\n\r\nexport const createMPGameTemplate = state => html`\r\n<div class=\"button\" on-click=${e => {\r\n    if (!state.user) {\r\n      anonLogin().then(user => {\r\n        createNewGame(user);\r\n\r\n        changePage('name')\r\n      })\r\n    } else {\r\n      createNewGame(state.user);\r\n\r\n      changePage('name')\r\n    }\r\n  }}>Create group</div>\r\n<div class=\"button\" on-click=${_ => changePage('enter_group')}>Join group</div>\r\n`\r\n","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { joinGame } from \"../logic\";\r\nimport { changePage } from \"../render\";\r\n\r\nexport const enterGroupTemplate = state => html`\r\n<input type=\"text\" placeholder=\"Enter your name!\" name=\"name\" id=\"input-username\"/><br />\r\n<input type=\"text\" placeholder=\"Enter group key!\" name=\"groupkey\" id=\"input-groupkey\" />\r\n<div class=\"button\" on-click=${e => {\r\n    const groupkey = document.getElementById('input-groupkey').value;\r\n    state.user.updateProfile({ displayName: document.getElementById(\"input-username\").value })\r\n\r\n    joinGame(groupkey, state.user);\r\n\r\n    changePage(\"question\");\r\n  }}>Enter group</div>\r\n`\r\n","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { createNewQuestion } from \"../logic\";\r\nimport { changePage } from \"../render\";\r\n\r\nexport const leaderboardTemplate = state => {\r\n  let rdy = true;\r\n  state.game.players.forEach(user => {\r\n    if (!state.game.currentQuestion.guesses.has(user.uid)\r\n      || state.game.currentQuestion.guesses.get(user.uid).ready === undefined\r\n      || state.game.currentQuestion.guesses.get(user.uid).ready !== 42\r\n    ) {\r\n      rdy = false;\r\n    }\r\n\r\n    if (state.game.hackLastQuestion !== 0 && state.game.hackLastQuestion !== state.game.currentQuestion) {\r\n      rdy = true;\r\n    }\r\n  });\r\n\r\n  const topTemplate = html`\r\n      <h1>TOP H4ck3r:</h1>\r\n      <table>\r\n          <thead>\r\n              <tr>\r\n                  <td>Name</td>\r\n                  <td>Guess</td>\r\n                  <td>Points</td>\r\n              </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${[... state.game.players].sort((a, b) => b.points - a.points).map(pl => lederboardItemTemplate(pl))}\r\n          </tbody>\r\n      </table>`\r\n\r\n  if (!rdy) {\r\n    return html`\r\n      ${topTemplate}\r\n      <img width=\"100\" height=\"100\" src=\"https://m.popkey.co/fe4ba7/DYALX.gif\" />`\r\n  } else {\r\n    state.game.hackLastQuestion = state.game.currentQuestion;\r\n    return html`\r\n      ${topTemplate}\r\n      <div class=\"button\" on-click=${(e) => {\r\n        ++state.game.round;\r\n        if (state.game.round >= state.game.maxRounds) {\r\n          changePage('win');\r\n        } else {\r\n          if (state.isCreator) {\r\n            createNewQuestion(state.game.ref)\r\n          }\r\n\r\n          changePage('question');\r\n        }\r\n      }}>Next round</div>\r\n    `\r\n  }\r\n}\r\n\r\nconst lederboardItemTemplate = (user) => {\r\n  const guess = state.game.currentQuestion.guesses.get(user.uid);\r\n  return html`\r\n  <tr>\r\n      <td>${user.displayName}</td>\r\n      <td>${guess ? guess.guess : ''}</td>\r\n      <td>${user.points}</td>\r\n  </tr>`\r\n}","import { html } from 'lit-html/lib/lit-extended.js'\r\n\r\nconst trivia = [\r\n  \"A long concatination of words that you can remember easily has a better cryptographic strength than a short password with mixed symbols\",\r\n  \"Forced frequent password changes weaken the choice of passwords\",\r\n  \"Uniform random passwords are hard to remember, why not let the user choose them?\",\r\n  \"Nist recommends: No password expiry without a reason\",\r\n  \"Nist recommends: Longer passwords have a higher cryptographic strength than complex short ones\",\r\n  \"Nist recommends: Passwords should have at least 8 characters\",\r\n  \"Nist recommends: Use password managers, if you can\",\r\n  html`Avoid commonly used passwords. Check your choice at <a href=\\\"https://haveibeenpwned.com/Passwords\\\">HaveIBeenPwned</a>!`,\r\n];\r\n\r\nexport function getRandomTrivia(){\r\n  return trivia[Math.floor(Math.random() * trivia.length)]\r\n}","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { loadingTemplate } from \"./loading\";\r\nimport { answerQuestion } from \"../logic\";\r\nimport { changePage } from \"../render\";\r\nimport { getRandomTrivia } from \"../trivia\";\r\n\r\nexport const questionGuessAmountTemplate = state => {\r\n  if (state.game.currentQuestion.done === true) {\r\n    return loadingTemplate(state);\r\n  }\r\n\r\n  return html`\r\n  <h1>${state.game.currentQuestion.answer}</h1> \r\n  <input type=\"text\" placeholder=\"Leaked... times\" name=\"input\" id=\"input-answer\"/>\r\n  <div class=\"button\" on-click=${e => {\r\n    const answer = document.getElementById('input-answer').value;\r\n\r\n    if (!isNaN(answer)) {\r\n      state.game.currentQuestion.answerQuestion(state.user, answer);\r\n      \r\n      changePage('answer');\r\n    }\r\n  }}>Submit</div>\r\n  <br />\r\n  ${getRandomTrivia()}\r\n`}\r\n","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { loadingTemplate } from \"./loading\";\r\nimport { answerQuestion } from \"../logic\";\r\nimport { changePage } from \"../render\";\r\nimport { getRandomTrivia } from \"../trivia\";\r\n\r\nexport const questionGuessPwTemplate = state => {\r\n  if (state.game.currentQuestion.done === true) {\r\n    return loadingTemplate(state);\r\n  }\r\n\r\n  return html`\r\n  <h1>${state.game.currentQuestion.question}</h1>\r\n  <input type=\"text\" placeholder=\"Guess password!\" name=\"input\" id=\"input-answer\" />\r\n  <div class=\"button\" on-click=${e => {\r\n    const answer = document.getElementById('input-answer').value;\r\n\r\n    state.game.currentQuestion.answerQuestion(state.user, answer);\r\n\r\n    changePage('answer')\r\n  }}>Submit</div>\r\n  <br />\r\n  ${getRandomTrivia()}\r\n  `\r\n}","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { addPlayerToGame } from \"../logic\";\r\nimport { changePage } from \"../render\";\r\n\r\nexport const setNameTemplate = state => html`\r\n<h1>Your group key is: </h1>\r\n<h1><a href=\"/#!${state.game.ref.key}\" on-click=${e => {\r\n  if (navigator.share) {\r\n    navigator.share({\r\n      title: 'My Little Pwnage',\r\n      text: 'Lets guess some passwords!',\r\n      url: '/#!' + state.game.ref.key,\r\n    })\r\n    .then(() => console.log('Successful share'))\r\n    .catch((error) => console.log('Error sharing', error));\r\n  }\r\n}}>${state.game.ref.key}</a></h1>\r\n<input type=\"text\" placeholder=\"Enter your name!\" name=\"name\" id=\"input-name\" />\r\n<div class=\"button\" on-click=${async e => {\r\n    const name = document.getElementById(\"input-name\").value;\r\n\r\n    if (name !== '') {\r\n      state.user.displayName = name;\r\n      state.user.points = 0;\r\n      state.game.addPlayer(state.user);\r\n\r\n      changePage('question');\r\n    }\r\n  }}>Enter group</div>\r\n`\r\n","import { html } from 'lit-html/lib/lit-extended.js'\r\nimport { changePage } from \"../render\";\r\n\r\nconst winningGifs = [\r\n  \"https://media.giphy.com/media/2gtoSIzdrSMFO/giphy.mp4\",\r\n  \"https://media.giphy.com/media/g9582DNuQppxC/giphy.mp4\",\r\n  \"https://media.giphy.com/media/xT0xezQGU5xCDJuCPe/giphy.mp4\",\r\n  \"https://media.giphy.com/media/3o6fIUZTTDl0IDjbZS/giphy.mp4\",\r\n  \"https://media.giphy.com/media/xHMIDAy1qkzNS/giphy.mp4\",\r\n  \"https://media.giphy.com/media/DKnMqdm9i980E/giphy.mp4\",\r\n  \"https://media.giphy.com/media/3o7TKJhBfNCiispgDm/giphy.mp4\",\r\n  \"https://media.giphy.com/media/cQNRp4QA8z7B6/giphy.mp4\",\r\n  \"https://media.giphy.com/media/K3RxMSrERT8iI/giphy.mp4\",\r\n  \"https://media.giphy.com/media/RWFpHUbc6s492/giphy.mp4\",\r\n  \"https://media.giphy.com/media/3NtY188QaxDdC/giphy.mp4\",\r\n  \"https://media.giphy.com/media/rjkJD1v80CjYs/giphy.mp4\",\r\n  \"https://media.giphy.com/media/DYH297XiCS2Ck/giphy.mp4\",\r\n  \"https://media.giphy.com/media/l4hLwMmFVBOAKF3EI/giphy.mp4\",\r\n  \"https://media3.giphy.com/media/SRO0ZwmImic0/giphy.mp4\"\r\n];\r\n\r\nexport const winTemplate = (state) => html`\r\n<h1>${state.game.players.size > 0 ? [...state.game.players].sort((a, b) => b.points - a.points)[0].displayName : '?'} wins!</h1>\r\n<video muted autoplay loop crossorigin=\"anonymous\" src=\"${winningGifs[Math.floor(Math.random() * winningGifs.length)]}\"></video>\r\n\r\n<div class=\"button\" on-click=${_ => changePage('index')}>New game</div>`\r\n","import { html } from 'lit-html/lib/lit-extended.js'\r\n\r\nexport const waitingTemplate = state => html`\r\n<video muted autoplay loop crossorigin=\"anonymous\" src=\"https://media.giphy.com/media/LiWsL77P4tA9a/giphy.mp4\"></video>\r\n<h1>Waiting for players...</h1>\r\n`\r\n"],"sourceRoot":""}